(define (domain FindTreasure)
(:requirements :typing :method-preconditions :hierarchy)

(:types
	robot lever - object
)

(:predicates
	(Free ?r - robot)
	(PassMid ?r - robot)
	(AtLever ?l - lever ?r - robot)
)

(:task task0 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task1 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task2 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task3 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task4 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task5 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task6 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task7 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task8 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task9 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task10 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))


(:method m13-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (task9 ?r1 ?r2 ?l1)
)

(:method m12-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (task8 ?r1 ?r2 ?l1)
)

(:method m11-task9
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task9 ?r1 ?r2 ?l1)
	:subtasks (task7 ?r1 ?r2 ?l1)
)

(:method m10-task8
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task8 ?r1 ?r2 ?l1)
	:subtasks (task6 ?r1 ?r2 ?l1)
)

(:method m9-task7
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task7 ?r1 ?r2 ?l1)
	:subtasks (task5 ?r1 ?r2 ?l1)
)

(:method m8-task6
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task6 ?r1 ?r2 ?l1)
	:subtasks (task4 ?r1 ?r2 ?l1)
)

(:method m7-task5
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task5 ?r1 ?r2 ?l1)
	:subtasks (task3 ?r1 ?r2 ?l1)
)

(:method m6-task5
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task5 ?r1 ?r2 ?l1)
	:subtasks (task2 ?r1 ?r2 ?l1)
)

(:method m5-task4
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task4 ?r1 ?r2 ?l1)
	:subtasks (task1 ?r1 ?r2 ?l1)
)

(:method m4-task4
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task4 ?r1 ?r2 ?l1)
	:subtasks (task0 ?r1 ?r2 ?l1)
)

(:method m3-task3
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task3 ?r1 ?r2 ?l1)
	:subtasks (and
		(act3 ?r1 ?r2 ?l1)
	)
)

(:method m2-task2
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task2 ?r1 ?r2 ?l1)
	:subtasks (and
		(act2 ?r1 ?r2 ?l1)
	)
)

(:method m1-task1
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task1 ?r1 ?r2 ?l1)
	:subtasks (and
		(act1 ?r1 ?r2 ?l1)
	)
)

(:method m0-task0
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task0 ?r1 ?r2 ?l1)
	:subtasks (and
		(act0 ?r1 ?r2 ?l1)
	)
)

(:action act3
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (Free ?r1) (Free ?r2)
		)
:effect (and (AtLever ?l1 ?r1) (not (Free ?r1)) (PassMid ?r2)
		)
)

(:action act2
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (Free ?r1) (Free ?r2)
		)
:effect (and (AtLever ?l1 ?r1) (not (Free ?r1))
		)
)

(:action act1
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (Free ?r1) (Free ?r2)
		)
:effect (and (PassMid ?r1) (AtLever ?l1 ?r2) (not (Free ?r2))
		)
)

(:action act0
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (Free ?r1) (Free ?r2)
		)
:effect (and (AtLever ?l1 ?r2) (not (Free ?r2))
		)
)


)